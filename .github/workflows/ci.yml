name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main

jobs:
  version-next:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version-next: ${{ steps.reference.outputs.next-reference }}
      version-next-strict: ${{ steps.reference.outputs.next-reference }}
    steps:
      - uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443

      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #4.2.1

      - name: Next Reference
        id: reference
        uses: wearefrank/ci-cd-templates/next-reference@5f916d5599b9023e0dde73638984a8a58615d2c0 #1.0.9

  ci:
    uses: wearefrank/ci-cd-templates/.github/workflows/ci-generic.yml@5f916d5599b9023e0dde73638984a8a58615d2c0 #1.0.9
    needs:
      - version-next
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
    with:
      version: ${{ needs.version-next.outputs.version-next }}
      run-frank-till-healthy-enabled: false

  run-larva-scenarios:
    runs-on: ubuntu-latest
    needs:
      - version-next
      - ci
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #4.2.1

      - name: Download Docker tar
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #4.1.8
        with:
          name: build-docker-image

      - name: Load Docker tar
        shell: bash
        run: |
          docker load --input image.tar
          docker image ls -a

      - name: Start Application
        run: |
          export APP_VERSION="${{ needs.version-next.outputs.version-next }}"
          docker run -d --name morcoreintegration -p 8080:8080 -e dtap.stage=LOC wearefrank/morcoreintegration:${APP_VERSION}
        timeout-minutes: 2

      - name: Wait for Application to be Healthy
        run: |
          start_time=$(date +%s)
          timeout=60
          while true; do
            if [ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/iaf/api/server/health)" == "200" ]; then
              echo "Application is healthy."
              break
            fi
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ $elapsed_time -ge $timeout ]; then
              echo "Application did not become healthy within $timeout seconds. Failing the job."
              exit 1
            fi
            echo "Waiting for application to be healthy..."
            sleep 5
          done
        timeout-minutes: 2

      - name: Trigger Larva Tool
        run: |
          curl -X POST 'http://localhost:8080/iaf/larva/index.jsp' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'scenariosrootdirectory=/opt/frank/testtool' \
            --data-urlencode 'waitbeforecleanup=100' \
            --data-urlencode 'loglevel=WRONG_PIPELINE_MESSAGES_PREPARED_FOR_DIFF' \
            --data-urlencode 'execute=/opt/frank/testtool' \
            --data-urlencode 'submit=start' > results.html

      - name: Check if all scenarios passed
        run: |
          if ! grep -q 'All scenarios passed' results.html; then
            echo "Not all scenarios passed. Failing the job."
            cat results.html
            exit 1
          fi